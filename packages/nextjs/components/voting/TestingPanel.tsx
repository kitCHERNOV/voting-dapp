"use client";

import { useState } from "react";
import { parseEther } from "viem";
import { useAccount, useBalance, useWalletClient } from "wagmi";
import { notification } from "~~/utils/scaffold-eth";

interface TestResult {
  name: string;
  status: "pending" | "running" | "success" | "error";
  message?: string;
}

export default function TestingPanel() {
  const { address } = useAccount();
  const { data: walletClient } = useWalletClient();
  const { data: balance } = useBalance({ address });
  const [testResults, setTestResults] = useState<TestResult[]>([]);
  const [isRunning, setIsRunning] = useState(false);

  const addResult = (result: TestResult) => {
    setTestResults(prev => [...prev, result]);
  };

  const updateResult = (index: number, updates: Partial<TestResult>) => {
    setTestResults(prev => prev.map((r, i) => (i === index ? { ...r, ...updates } : r)));
  };

  const runHardhatTests = async () => {
    setTestResults([]);
    setIsRunning(true);

    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      addResult({ name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞", status: "running" });
      const test0 = testResults.length;
      if (!address) {
        updateResult(test0, { status: "error", message: "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω" });
        setIsRunning(false);
        return;
      }
      updateResult(test0, { status: "success", message: `–ü–æ–¥–∫–ª—é—á–µ–Ω: ${address}` });

      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      addResult({ name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ETH", status: "running" });
      const test1 = testResults.length;
      if (!balance || Number(balance.value) < parseEther("0.1")) {
        updateResult(test1, {
          status: "error",
          message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH. –ë–∞–ª–∞–Ω—Å: ${balance?.formatted || "0"} ETH`,
        });
        notification.warning("–ü–æ–ª—É—á–∏—Ç–µ ETH —á–µ—Ä–µ–∑ –∫—Ä–∞–Ω (Faucet)");
      } else {
        updateResult(test1, { status: "success", message: `–ë–∞–ª–∞–Ω—Å: ${balance.formatted} ETH` });
      }

      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      addResult({ name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", status: "running" });
      const test2 = testResults.length;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç
      addResult({ name: "‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã", status: "success" });
      addResult({
        name: "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Hardhat —Ç–µ—Å—Ç—ã: yarn test",
        status: "pending",
        message: "–ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ Hardhat",
      });

      notification.success("–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Hardhat —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
    } catch (error: any) {
      console.error("Test error:", error);
      notification.error(error.message || "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞");
    } finally {
      setIsRunning(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <div className="card bg-base-100 shadow-xl">
        <div className="card-body">
          <h2 className="card-title">üß™ –ü–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
          <p className="text-sm opacity-70 mb-4">
            –≠—Ç–∞ –ø–∞–Ω–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Hardhat
            —Ç–µ—Å—Ç—ã.
          </p>

          <div className="alert alert-info mb-4">
            <span>
              ‚ÑπÔ∏è –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code className="text-xs">yarn test</code> –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
            </span>
          </div>

          <div className="flex gap-2">
            <button
              className="btn btn-primary"
              onClick={runHardhatTests}
              disabled={isRunning || !address}
            >
              {isRunning ? "–ó–∞–ø—É—Å–∫..." : "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏"}
            </button>
            <button
              className="btn btn-secondary"
              onClick={() => setTestResults([])}
              disabled={testResults.length === 0}
            >
              –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </button>
          </div>
        </div>
      </div>

      {testResults.length > 0 && (
        <div className="card bg-base-100 shadow-xl">
          <div className="card-body">
            <h3 className="card-title">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h3>
            <div className="space-y-2">
              {testResults.map((result, index) => (
                <div
                  key={index}
                  className={`flex items-center gap-2 p-3 rounded-lg ${
                    result.status === "success"
                      ? "bg-success/10 border border-success"
                      : result.status === "error"
                        ? "bg-error/10 border border-error"
                        : "bg-base-200"
                  }`}
                >
                  <span>
                    {result.status === "success"
                      ? "‚úÖ"
                      : result.status === "error"
                        ? "‚ùå"
                        : result.status === "running"
                          ? "‚è≥"
                          : "‚≠ï"}
                  </span>
                  <div className="flex-1">
                    <div className="font-semibold">{result.name}</div>
                    {result.message && <div className="text-sm opacity-70">{result.message}</div>}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      <div className="card bg-base-100 shadow-xl">
        <div className="card-body">
          <h3 className="card-title">üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Hardhat —Ç–µ—Å—Ç–æ–≤</h3>
          <div className="space-y-4">
            <div>
              <h4 className="font-semibold mb-2">–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:</h4>
              <code className="block p-3 bg-base-200 rounded">yarn test</code>
            </div>
            <div>
              <h4 className="font-semibold mb-2">–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:</h4>
              <code className="block p-3 bg-base-200 rounded">yarn test --grep "DecentralizedVoting"</code>
            </div>
            <div>
              <h4 className="font-semibold mb-2">–ó–∞–ø—É—Å–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º:</h4>
              <code className="block p-3 bg-base-200 rounded">yarn test --verbose</code>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

