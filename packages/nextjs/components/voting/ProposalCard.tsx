"use client";

import { useState } from "react";
import CandidateList from "./CandidateList";
import CompactCountdownTimer from "./CompactCountdownTimer";
import ProposalVoterManagement from "./ProposalVoterManagement";
import { formatDistanceToNow } from "date-fns";
import { ru } from "date-fns/locale";
import { useAccount } from "wagmi";
import { useBlockTimestamp, useScaffoldReadContract, useScaffoldWriteContract } from "~~/hooks/scaffold-eth";
import { notification } from "~~/utils/scaffold-eth";

interface ProposalCardProps {
  proposalId: bigint;
}

export default function ProposalCard({ proposalId }: ProposalCardProps) {
  const { address: connectedAddress } = useAccount();
  const [showDetails, setShowDetails] = useState(false);
  const [showVoterManagement, setShowVoterManagement] = useState(false);
  const [selectedCandidate, setSelectedCandidate] = useState<bigint | null>(null);

  // Use blockchain timestamp instead of client time
  const blockTimestamp = useBlockTimestamp();

  const { data: proposal } = useScaffoldReadContract({
    contractName: "DecentralizedVoting",
    functionName: "proposals",
    args: [proposalId],
  });

  const { data: hasVoted } = useScaffoldReadContract({
    contractName: "DecentralizedVoting",
    functionName: "hasVoted",
    args: [proposalId, connectedAddress],
  });

  const { data: isGloballyRegistered } = useScaffoldReadContract({
    contractName: "DecentralizedVoting",
    functionName: "registeredVoters",
    args: [connectedAddress],
  });

  const { data: isRegisteredForProposal } = useScaffoldReadContract({
    contractName: "DecentralizedVoting",
    functionName: "isVoterRegisteredForProposal",
    args: [proposalId, connectedAddress],
  });

  const { writeContractAsync: selfRegisterForProposal } = useScaffoldWriteContract("DecentralizedVoting");

  if (!proposal) return null;

  const [, title, description, creator, startTime, endTime, finalized, totalVotes] = proposal;
  // Use blockchain timestamp for accurate time calculations
  const now = blockTimestamp;
  const isActive = now >= Number(startTime) && now <= Number(endTime) && !finalized;
  const hasEnded = now > Number(endTime);
  const isCreator = connectedAddress && creator && connectedAddress.toLowerCase() === creator.toLowerCase();

  // User can vote if they are globally registered OR registered for this specific proposal
  const canVote = isGloballyRegistered || isRegisteredForProposal;
  const canSelfRegister = now < Number(startTime) && !finalized; // Can only register before voting starts

  const handleSelfRegisterForProposal = async () => {
    try {
      await selfRegisterForProposal({
        functionName: "selfRegisterForProposal",
        args: [proposalId],
      });
      notification.success("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!");
      window.location.reload();
    } catch (e: any) {
      console.error("Error self-registering for proposal:", e);
      notification.error(e.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    }
  };

  const getStatusBadge = () => {
    if (finalized) return <span className="badge badge-neutral">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>;
    if (isActive) return <span className="badge badge-success">–ê–∫—Ç–∏–≤–Ω–æ</span>;
    if (hasEnded) return <span className="badge badge-warning">–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</span>;
    return (
      <div className="flex items-center gap-2">
        <span className="badge badge-info">–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑:</span>
        <CompactCountdownTimer
          targetTime={Number(startTime)}
          onComplete={() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–≥–¥–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
            window.location.reload();
          }}
        />
      </div>
    );
  };

  return (
    <div className="card bg-base-100 shadow-xl">
      <div className="card-body">
        <div className="flex justify-between items-start">
          <h2 className="card-title">{title}</h2>
          {getStatusBadge()}
        </div>

        <p className="text-sm opacity-70">{description}</p>

        <div className="text-sm mt-2">
          <div className="flex justify-between">
            <span>–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤:</span>
            <span className="font-bold">{totalVotes?.toString()}</span>
          </div>
          <div className="flex justify-between">
            <span>–ù–∞—á–∞–ª–æ:</span>
            <div className="text-right">
              <div>
                {formatDistanceToNow(new Date(Number(startTime) * 1000), {
                  addSuffix: true,
                  locale: ru,
                })}
              </div>
              {!isActive && !hasEnded && (
                <CompactCountdownTimer targetTime={Number(startTime)} className="text-xs opacity-70" />
              )}
            </div>
          </div>
          <div className="flex justify-between">
            <span>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</span>
            <span>
              {formatDistanceToNow(new Date(Number(endTime) * 1000), {
                addSuffix: true,
                locale: ru,
              })}
            </span>
          </div>

          {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ */}
          <div className="text-xs opacity-60 mt-2 border-t pt-2">
            <div>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–ª–æ–∫—á–µ–π–Ω–∞: {new Date(now * 1000).toLocaleString()}</div>
            <div>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {new Date(Number(startTime) * 1000).toLocaleString()}</div>
            <div>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new Date(Number(endTime) * 1000).toLocaleString()}</div>
            <div>–°—Ç–∞—Ç—É—Å: {isActive ? "–ê–∫—Ç–∏–≤–Ω–æ" : hasEnded ? "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" : "–û–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞"}</div>
            <div>isActive: {isActive ? "true" : "false"}</div>
            <div>hasVoted: {hasVoted ? "true" : "false"}</div>
            <div>canVote: {canVote ? "true" : "false"}</div>
            <div>canVote –¥–ª—è CandidateList: {isActive && !hasVoted && canVote ? "true" : "false"}</div>
          </div>
        </div>

        {hasVoted && (
          <div className="alert alert-success mt-2">
            <span>‚úì –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏</span>
          </div>
        )}

        {!canVote && connectedAddress && !isCreator && (
          <div className="alert alert-warning mt-2">
            <div className="flex flex-col gap-2">
              <span>‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.</span>
              {canSelfRegister && (
                <button
                  className="btn btn-primary btn-sm"
                  onClick={handleSelfRegisterForProposal}
                  disabled={isRegisteredForProposal}
                >
                  {isRegisteredForProposal ? "‚úì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"}
                </button>
              )}
              {!canSelfRegister && (
                <span className="text-sm opacity-70">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</span>
              )}
            </div>
          </div>
        )}

        {isCreator && (
          <div className="alert alert-info mt-2">
            <span>üëë –í—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</span>
          </div>
        )}

        <div className="card-actions justify-between mt-4">
          <div className="flex gap-2">
            <button className="btn btn-primary btn-sm" onClick={() => setShowDetails(!showDetails)}>
              {showDetails ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"}
            </button>
            {isCreator && (
              <button className="btn btn-secondary btn-sm" onClick={() => setShowVoterManagement(!showVoterManagement)}>
                {showVoterManagement ? "–°–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" : "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"}
              </button>
            )}
          </div>
        </div>

        {showDetails && (
          <div className="mt-4 border-t pt-4">
            <CandidateList
              proposalId={proposalId}
              onSelectCandidate={setSelectedCandidate}
              selectedCandidate={selectedCandidate}
              showVoteButton={true}
              canVote={isActive && !hasVoted && canVote}
              startTime={Number(startTime)}
            />
          </div>
        )}

        {showVoterManagement && (
          <div className="mt-4 border-t pt-4">
            <ProposalVoterManagement proposalId={proposalId} />
          </div>
        )}
      </div>
    </div>
  );
}
